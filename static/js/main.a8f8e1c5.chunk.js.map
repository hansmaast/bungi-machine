{"version":3,"sources":["style/disableUserSelect.ts","style/menuButton.ts","style/menuContainer.ts","style/styledLink.ts","components/Menu.tsx","style/box.ts","constants.ts","style/grid.tsx","style/gridItem.ts","components/TriggerPoint.tsx","pages/GridGoon.tsx","pages/HomePage.tsx","pages/RythmPage.tsx","style/appContainer.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","style/globalStyle.ts","index.tsx"],"names":["disableUserSelect","css","MenuButton","styled","button","isOpen","position","space","typography","layout","defaultProps","top","left","marginY","marginX","padding","paddingX","fontSize","MenuContainer","div","props","color","flexbox","bottom","maxWidth","StyledLink","Link","m","Menu","useState","showMenu","setShowMenu","showSettings","setShowSettings","closeMenus","onClick","zIndex","right","flexWrap","bg","to","Flex","height","display","flexDirection","alignItems","justifyContent","p","numbers","Array","from","multiplier","keys","bebopLocrian","reverse","Grid","maxHeight","GridItem","isTouched","synth","Tone","envelope","attack","release","sustain","toDestination","TriggerPoint","note","octave","setIsTouched","handleTouchStart","e","preventDefault","now","triggerAttack","handleTouchEnd","triggerRelease","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","GridGoon","map","number","length","HomePage","RythmPage","AppContainer","App","basename","exact","path","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","normalize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8f8e1c5.chunk.js","sourcesContent":["import { css } from 'styled-components';\n\nexport const disableUserSelect = css`\n -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome and Opera */\n`;\n","import styled from 'styled-components';\nimport {\n  layout, position, space, typography,\n} from 'styled-system';\nimport { disableUserSelect } from './disableUserSelect';\nimport { StyleProps } from './types';\n\nexport const MenuButton = styled.button<StyleProps & any>`\n  z-index: 10;\n  background-color: ${({ isOpen }) => (isOpen ? 'black' : 'white')};;\n  color: ${({ isOpen }) => (isOpen ? 'white' : 'black')};\n  border: 1px solid;\n  border-radius: 4px;\n  ${disableUserSelect};\n  ${position};\n  ${space};\n  ${typography};\n  ${layout};\n`;\nMenuButton.defaultProps = {\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  marginY: 3,\n  marginX: [3, 4, 6],\n  padding: [2],\n  paddingX: 3,\n  fontSize: 4,\n};\n","import styled from 'styled-components';\nimport {\n  color, flexbox, layout, position, space,\n} from 'styled-system';\nimport { StyleProps } from './types';\n\nexport const MenuContainer = styled.div<StyleProps & any>`\n transform: ${(props) => (props.isOpen ? '' : 'translateX(-100%)')};\n  background-color: black;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  transition: transform 0.1s ease-in-out;\n ${position};\n  ${space};\n  ${layout};\n  ${color};\n  ${flexbox};\n`;\nMenuContainer.defaultProps = {\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  maxWidth: ['100vw', '50vw'],\n};\n","import { Link } from 'react-router-dom';\nimport styled, { DefaultTheme, ThemedStyledInterface } from 'styled-components';\nimport { color, space } from 'styled-system';\n\ntype StyledTypes = ThemedStyledInterface<DefaultTheme> & any;\nexport const StyledLink: StyledTypes = styled(Link)`\n    background-color: black;\n    color: whitesmoke;\n    transition: all 0.2s ease-in-out;\n    &:focus, :hover {\n        transform: scale(1.2);\n        box-shadow: 0px 0px 30px 30px rgba(250,250,250, 0.4) inset, 0px 0px 20px 10px rgba(250, 250,250, 0.7);\n    };\n    ${space};\n    ${color};\n`;\n\nStyledLink.defaultProps = {\n  padding: 5,\n  m: 3,\n\n};\n","import { useState } from 'react';\nimport { MenuButton } from '../style/menuButton';\nimport { MenuContainer } from '../style/menuContainer';\nimport { StyledLink } from '../style/styledLink';\n\nexport function Menu() {\n  const [showMenu, setShowMenu] = useState<boolean>(false);\n  const [showSettings, setShowSettings] = useState<boolean>(false);\n\n  const closeMenus = () => {\n    setShowMenu(!showMenu);\n  };\n  return (\n    <>\n      <MenuButton isOpen={showMenu} onClick={closeMenus}>\n        {showMenu ? 'X' : 'O'}\n      </MenuButton>\n      <MenuContainer isOpen={showMenu}>\n        <MenuButton zIndex={25} left=\"\" right={0} isOpen={showSettings} onClick={() => setShowSettings(!showSettings)}>\n          {showSettings ? 'X' : '|||'}\n        </MenuButton>\n        <MenuContainer flexWrap=\"wrap\" zIndex={20} isOpen={showSettings} bg=\"gray\" />\n        <StyledLink to=\"/rythm\" onClick={closeMenus}>Riddm</StyledLink>\n        <StyledLink to=\"/grid-goon\" onClick={closeMenus}>Grid Goon</StyledLink>\n      </MenuContainer>\n    </>\n  );\n}\n","import styled from 'styled-components';\nimport {\n  color, flexbox, layout, position, space,\n} from 'styled-system';\nimport { StyleProps } from './types';\n\nexport const Flex = styled.div<StyleProps>(\n  space,\n  layout,\n  flexbox,\n  color,\n  position,\n);\n\nFlex.defaultProps = {\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexWrap: 'wrap',\n  p: 1,\n};\n","export const multiplier = 4;\nexport const numbers = Array.from(Array(multiplier * multiplier).keys());\n\n// create a synth and connect it to the main output (your speakers)\nexport const bebopLocrian = ['C', 'Db', 'Eb', 'F', 'Gb', 'G', 'Ab', 'Bb'].reverse();\n","import styled from 'styled-components';\nimport { flexbox, layout } from 'styled-system';\nimport { StyleProps } from './types';\nimport { multiplier } from '../constants';\n\nexport const Grid = styled.div<StyleProps>`\n    display: grid;\n    direction: rtl;\n    grid-gap: 5px;\n    height: 100vw;\n    width: 100%;\n    grid-template-columns: repeat(${multiplier}, 1fr);\n    grid-template-rows: repeat(${multiplier}, 1fr);\n    ${flexbox};\n    ${layout};\n`;\nGrid.defaultProps = {\n  padding: [2, 4],\n  maxHeight: ['100vh', '70vh'],\n  maxWidth: ['100vh', '70vh'],\n};\n","import styled from 'styled-components';\nimport { StyleProps } from './types';\nimport { disableUserSelect } from './disableUserSelect';\n\nexport const GridItem = styled.button<StyleProps & any>`\n    height: 100%;\n    transition: all 0.15s;\n    border: 1px solid;\n    background-color: ${({ isTouched }) => (isTouched ? 'black' : 'transparent')};\n    border-radius: ${({ isTouched }) => (isTouched ? '50%' : '5%')};\n    ${disableUserSelect};\n`;\n","import { useState } from 'react';\nimport * as Tone from 'tone';\nimport { GridItem } from '../style/gridItem';\n\nconst synth = new Tone.Synth({\n  envelope: {\n    attack: 0.01,\n    release: 0.2,\n    sustain: 0.5,\n  },\n}).toDestination();\n\nexport default function TriggerPoint({ note, octave }: { note: string; octave: string; }) {\n  const [isTouched, setIsTouched] = useState<boolean>(false);\n  // Use preventDefault() inside touch event handlers,\n  // so the default mouse-emulation handling doesn’t occur.\n  const handleTouchStart = (e: any) => {\n    e.preventDefault();\n    setIsTouched(true);\n    // play a middle 'C' for the duration of an 8th note\n    // const note: string = getRandomNote(bebopLocrian) + getRandomNumber(2, 4).toString(10);\n    const now = Tone.now();\n    synth.triggerAttack(note + octave, now);\n  };\n\n  const handleTouchEnd = (e: any) => {\n    e.preventDefault();\n    setIsTouched(false);\n    synth.triggerRelease(Tone.now());\n  };\n  return (\n    <GridItem\n      isTouched={isTouched}\n      onMouseDown={handleTouchStart}\n      onMouseUp={handleTouchEnd}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n    >\n      {note + octave}\n    </GridItem>\n  );\n}\n","import { Flex } from '../style/box';\nimport { Grid } from '../style/grid';\nimport TriggerPoint from '../components/TriggerPoint';\nimport { bebopLocrian, numbers } from '../constants';\n\nexport default function GridGoon() {\n  return (\n    <Flex>\n      <Grid>\n        {\n          numbers.map((number) => {\n            let octave: string = '3';\n            let note = bebopLocrian[number];\n            if (number > 7) {\n              note = bebopLocrian[number - bebopLocrian.length];\n              octave = '2';\n            }\n            return (\n              <TriggerPoint note={note} octave={octave} />\n            );\n          })\n        }\n      </Grid>\n    </Flex>\n  );\n}\n","import { Flex } from '../style/box';\nimport { StyledLink } from '../style/styledLink';\n\nexport default function HomePage() {\n  return (\n    <Flex>\n      <StyledLink to=\"grid-goon\">Grid Goon</StyledLink>\n      <StyledLink to=\"rythm\">Riddm</StyledLink>\n    </Flex>\n  );\n}\n","export default function RythmPage() {\n  return (\n    <div>\n      Rythm\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { position } from 'styled-system';\nimport { StyleProps } from './types';\n\nexport const AppContainer = styled.div<StyleProps>(\n  position,\n);\nAppContainer.defaultProps = {\n  position: 'absolute', top: 0, bottom: 0, right: 0, left: 0,\n};\n","/* eslint-disable import/extensions */\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Menu } from './components/Menu';\nimport GridGoon from './pages/GridGoon';\nimport HomePage from './pages/HomePage';\nimport RythmPage from './pages/RythmPage';\nimport { AppContainer } from './style/appContainer';\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/bungi-machine\">\n      <AppContainer>\n        <Menu />\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/rythm\">\n            <RythmPage />\n          </Route>\n          <Route path=\"/grid-goon\">\n            <GridGoon />\n          </Route>\n        </Switch>\n      </AppContainer>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\n ${normalize}\n  :root,\n  html,\n  body {\n    margin: 0;\n    font-family: Arial;\n  }\n\n  * {\n      box-sizing: border-box;\n      -webkit-appearance: none;\n      text-decoration: none;\n\n  }\n`;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStyle } from './style/globalStyle';\n\nReactDOM.render(\n  <StrictMode>\n    <GlobalStyle />\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}